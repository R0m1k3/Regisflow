#!/bin/bash

echo "üöÄ RegisFlow Docker Deployment Test"
echo "==================================="

# Fonction de test des pr√©requis
check_prerequisites() {
    echo "üìã Checking prerequisites..."
    
    # Docker
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker not found. Please install Docker."
        exit 1
    fi
    
    # Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose not found. Please install Docker Compose."
        exit 1
    fi
    
    echo "‚úÖ Docker and Docker Compose are available"
}

# Fonction de validation des fichiers
check_files() {
    echo "üìÅ Checking required files..."
    
    required_files=(
        "Dockerfile"
        "docker-compose.yml" 
        "docker-entrypoint.sh"
        ".env.production.example"
        "package.json"
    )
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            echo "‚ùå Missing required file: $file"
            exit 1
        fi
    done
    
    echo "‚úÖ All required files are present"
}

# Test de build Docker
test_docker_build() {
    echo "üî® Testing Docker build..."
    
    if docker-compose build --no-cache regisflow; then
        echo "‚úÖ Docker build successful"
    else
        echo "‚ùå Docker build failed"
        exit 1
    fi
}

# Test de configuration
test_configuration() {
    echo "‚öôÔ∏è  Testing configuration..."
    
    if [[ ! -f ".env.production" ]]; then
        echo "‚ö†Ô∏è  .env.production not found, creating from example..."
        cp .env.production.example .env.production
        echo "üìù Please edit .env.production with your secure credentials!"
    fi
    
    # V√©rifier que les variables critiques ne sont pas par d√©faut
    if grep -q "CHANGEME" .env.production; then
        echo "‚ö†Ô∏è  WARNING: Default passwords detected in .env.production"
        echo "   Please change POSTGRES_PASSWORD and SESSION_SECRET"
    fi
    
    echo "‚úÖ Configuration checked"
}

# Test de d√©marrage rapide
test_startup() {
    echo "üö¶ Testing container startup..."
    
    # Nettoyer d'abord
    docker-compose down -v 2>/dev/null
    
    # D√©marrer en mode d√©tach√©
    if docker-compose up -d; then
        echo "‚úÖ Containers started successfully"
        
        # Attendre que l'application soit pr√™te
        echo "‚è≥ Waiting for application to be ready..."
        timeout=60
        while ! curl -s http://localhost:5000/health >/dev/null && [ $timeout -gt 0 ]; do
            echo "   Waiting... ($timeout seconds left)"
            sleep 2
            timeout=$((timeout-2))
        done
        
        if [ $timeout -gt 0 ]; then
            echo "‚úÖ Application is responding"
            echo "üè• Health check: $(curl -s http://localhost:5000/health | grep -o '"status":"[^"]*"')"
        else
            echo "‚ùå Application startup timeout"
            echo "üìã Container logs:"
            docker-compose logs --tail=20 regisflow
            exit 1
        fi
        
    else
        echo "‚ùå Container startup failed"
        exit 1
    fi
}

# Test de connexion base de donn√©es
test_database() {
    echo "üóÑÔ∏è  Testing database connection..."
    
    if docker exec regisflow-db pg_isready -U regisflow -q; then
        echo "‚úÖ Database is accessible"
        
        # Tester les tables
        tables=$(docker exec regisflow-db psql -U regisflow -t -c "\dt" | wc -l)
        echo "üìä Database has $tables tables"
        
    else
        echo "‚ùå Database connection failed"
        exit 1
    fi
}

# Fonction de nettoyage
cleanup() {
    echo "üßπ Cleaning up test containers..."
    docker-compose down -v
    echo "‚úÖ Cleanup completed"
}

# Test complet
run_full_test() {
    check_prerequisites
    check_files
    test_configuration
    test_docker_build
    test_startup
    test_database
    
    echo ""
    echo "üéâ ALL TESTS PASSED!"
    echo "===================="
    echo "RegisFlow is ready for production deployment"
    echo ""
    echo "Next steps:"
    echo "1. Edit .env.production with secure credentials"
    echo "2. Run: docker-compose up -d"
    echo "3. Access: http://localhost:5000"
    echo "4. Monitor: docker-compose logs -f"
    echo ""
    
    cleanup
}

# Ex√©cuter le test ou afficher l'aide
case "${1:-test}" in
    "test")
        run_full_test
        ;;
    "build")
        check_prerequisites
        check_files
        test_docker_build
        ;;
    "health")
        curl -s http://localhost:5000/health | python3 -m json.tool || echo "Application not running"
        ;;
    "cleanup")
        cleanup
        ;;
    "help")
        echo "Usage: $0 [test|build|health|cleanup|help]"
        echo "  test     - Run full deployment test (default)"
        echo "  build    - Test Docker build only"
        echo "  health   - Check application health"
        echo "  cleanup  - Clean up test containers"
        echo "  help     - Show this help"
        ;;
    *)
        echo "Unknown option: $1"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac