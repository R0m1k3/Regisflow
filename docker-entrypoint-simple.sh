#!/bin/sh
set -e

# Script d'entr√©e simplifi√© pour RegisFlow
echo "üöÄ D√©marrage de RegisFlow (mode simplifi√©)..."

# Attendre que PostgreSQL soit pr√™t
echo "üì° Attente de la base de donn√©es..."
RETRIES=24
while [ $RETRIES -gt 0 ]; do
  if pg_isready -h regisflow-db -p 5432 -U regisflow >/dev/null 2>&1; then
    echo "‚úÖ PostgreSQL pr√™t!"
    break
  fi
  echo "‚è≥ Attente... ($((25-RETRIES))/24)"
  sleep 5
  RETRIES=$((RETRIES-1))
done

if [ $RETRIES -eq 0 ]; then
  echo "‚ùå Timeout: Base de donn√©es non accessible"
  exit 1
fi

# Cr√©er les r√©pertoires n√©cessaires
mkdir -p /app/backups /app/logs

# Cr√©er les tables de la base de donn√©es
echo "üì¶ Cr√©ation des tables de la base de donn√©es..."

# M√©thode 1: Utiliser Drizzle Kit (recommand√©)
if npx drizzle-kit push --config=./drizzle.config.ts; then
  echo "‚úÖ Tables cr√©√©es avec succ√®s via Drizzle"
else
  echo "‚ö†Ô∏è  Drizzle Kit failed, essai avec init.sql..."
  
  # M√©thode 2: Fallback avec init.sql si Drizzle √©choue
  if [ -f "/app/init.sql" ]; then
    export PGPASSWORD="$POSTGRES_PASSWORD"
    if psql -h regisflow-db -p 5432 -U regisflow -d regisflow -f /app/init.sql; then
      echo "‚úÖ Tables cr√©√©es avec succ√®s via init.sql"
    else
      echo "‚ùå Erreur lors de la cr√©ation des tables"
      exit 1
    fi
  else
    echo "‚ùå Aucune m√©thode d'initialisation disponible"
    exit 1
  fi
fi

echo "‚úÖ Base de donn√©es configur√©e"

# D√©marrer l'application avec le script de polyfill Node.js 18
echo "üéØ D√©marrage de RegisFlow..."
export NODE_ENV=production
export PORT=5000
cd /app
exec node server/prod-start.js