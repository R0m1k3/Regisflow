#!/bin/sh
set -e

# Script d'entr√©e pour le container RegisFlow
echo "üöÄ D√©marrage de RegisFlow..."

# Attendre que la base de donn√©es externe soit pr√™te
echo "üì° Attente de la base de donn√©es externe..."

# Extraire l'h√¥te et le port depuis DATABASE_URL
DB_HOST=$(echo $DATABASE_URL | sed -n 's|.*@\([^:]*\):.*|\1|p')
DB_PORT=$(echo $DATABASE_URL | sed -n 's|.*:\([0-9]*\)/.*|\1|p')
DB_USER=$(echo $DATABASE_URL | sed -n 's|.*://\([^:]*\):.*|\1|p')

if [ -z "$DB_HOST" ] || [ -z "$DB_PORT" ]; then
  echo "‚ùå Erreur: DATABASE_URL mal format√©e"
  echo "Format attendu: postgresql://user:password@host:port/database"
  echo "DATABASE_URL actuelle: $DATABASE_URL"
  exit 1
fi

echo "üîç Test de connexion √† $DB_HOST:$DB_PORT..."

# Attendre jusqu'√† 120 secondes pour PostgreSQL externe
RETRIES=24
while [ $RETRIES -gt 0 ]; do
  if pg_isready -h "$DB_HOST" -p "$DB_PORT" -U "$DB_USER"; then
    echo "‚úÖ PostgreSQL externe est pr√™t!"
    break
  fi
  echo "‚è≥ Base de donn√©es externe non pr√™te, tentative $((25-RETRIES))/24, attente de 5 secondes..."
  sleep 5
  RETRIES=$((RETRIES-1))
done

if [ $RETRIES -eq 0 ]; then
  echo "‚ùå Timeout: Impossible de se connecter √† PostgreSQL externe apr√®s 2 minutes"
  echo "üîç Diagnostic:"
  echo "   - Host: $DB_HOST"
  echo "   - Port: $DB_PORT"
  echo "   - User: $DB_USER"
  echo "   - V√©rifiez que PostgreSQL est accessible depuis Docker"
  echo "   - V√©rifiez le firewall et les permissions r√©seau"
  exit 1
fi

echo "‚úÖ Base de donn√©es pr√™te!"

# Ex√©cuter les migrations de base de donn√©es
echo "üîÑ Ex√©cution des migrations..."
npx drizzle-kit push

# Cr√©er le r√©pertoire des sauvegardes s'il n'existe pas
mkdir -p /app/backups

# D√©marrer l'application
echo "üéØ D√©marrage de l'application RegisFlow..."
exec "$@"