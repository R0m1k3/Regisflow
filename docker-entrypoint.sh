#!/bin/sh
set -e

# Script d'entr√©e pour le container RegisFlow
echo "üöÄ D√©marrage de RegisFlow..."

# Attendre que la base de donn√©es Docker soit pr√™te
echo "üì° Attente de la base de donn√©es regisflow-db..."
echo "üîç Test de connexion √† regisflow-db:5432..."

# Attendre jusqu'√† 120 secondes pour PostgreSQL Docker
RETRIES=24
while [ $RETRIES -gt 0 ]; do
  if pg_isready -h regisflow-db -p 5432 -U regisflow; then
    echo "‚úÖ PostgreSQL regisflow-db est pr√™t!"
    break
  fi
  echo "‚è≥ Base de donn√©es non pr√™te, tentative $((25-RETRIES))/24, attente de 5 secondes..."
  sleep 5
  RETRIES=$((RETRIES-1))
done

if [ $RETRIES -eq 0 ]; then
  echo "‚ùå Timeout: Impossible de se connecter √† regisflow-db apr√®s 2 minutes"
  echo "üîç Diagnostic:"
  echo "   - V√©rifiez que le service regisflow-db d√©marre correctement"
  echo "   - V√©rifiez les logs: docker-compose logs regisflow-db"
  exit 1
fi

echo "‚úÖ Base de donn√©es pr√™te!"

# Ex√©cuter les migrations de base de donn√©es
echo "üîÑ Ex√©cution des migrations..."
if command -v drizzle-kit >/dev/null 2>&1; then
    npx drizzle-kit push
else
    echo "‚ö†Ô∏è  drizzle-kit non disponible, tentative avec npm run db:push..."
    if [ -f package.json ]; then
        npm run db:push || echo "‚ÑπÔ∏è  Migrations manuelles n√©cessaires"
    else
        echo "‚ÑπÔ∏è  Package.json non trouv√©, poursuite sans migrations"
    fi
fi

# Cr√©er le r√©pertoire des sauvegardes s'il n'existe pas
mkdir -p /app/backups

# L'application est d√©j√† construite dans le Dockerfile
echo "‚úÖ Application pr√©-construite"

# D√©marrer l'application en production
echo "üéØ D√©marrage de l'application RegisFlow..."
exec npm run start