#!/bin/bash

# Script de d√©ploiement PRODUCTION RegisFlow
# Utilisation: ./deploy-prod.sh

set -e

echo "üöÄ D√©ploiement PRODUCTION RegisFlow"
echo "===================================="

# V√©rifications pr√©alables
echo "üîç V√©rifications pr√©alables..."

# V√©rifier que nous sommes en mode production
if [ "$NODE_ENV" != "production" ]; then
    echo "‚ö†Ô∏è  Variable NODE_ENV non d√©finie sur 'production'"
    read -p "Continuer quand m√™me ? (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# V√©rifier Docker et Docker Compose
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n'est pas install√©"
    exit 1
fi

# Cr√©er les r√©pertoires de donn√©es
echo "üìÅ Cr√©ation des r√©pertoires de donn√©es..."
mkdir -p data/{postgres,backups,logs,postgres-logs}
chmod 755 data data/*

# Cr√©er le fichier .env s'il n'existe pas
if [ ! -f .env ]; then
    echo "üìù Cr√©ation du fichier .env..."
    cp .env.example .env
    echo "‚úÖ Fichier .env cr√©√© avec configuration par d√©faut"
    
    echo ""
    echo "‚ÑπÔ∏è  CONFIGURATION AUTOMATIQUE :"
    echo "   - Mots de passe pr√©-configur√©s pour installation simple"
    echo "   - Pour la production, modifiez POSTGRES_PASSWORD et SESSION_SECRET"
    echo ""
fi

# V√©rifier les variables critiques
echo "üîí V√©rification de la configuration..."
source .env

if [ "$POSTGRES_PASSWORD" = "RegisFlow2024!PostgreSQL" ]; then
    echo "‚ö†Ô∏è  Utilisation des mots de passe par d√©faut (OK pour test, changez pour production)"
else
    echo "‚úÖ Mots de passe personnalis√©s d√©tect√©s"
fi

echo "‚úÖ Configuration valid√©e"

# Arr√™ter les services existants
echo "üõë Arr√™t des services existants..."
docker-compose down 2>/dev/null || true

# Construire les images
echo "üî® Construction des images de production..."
docker-compose build --no-cache

# V√©rifier l'espace disque
echo "üíæ V√©rification de l'espace disque..."
DISK_USAGE=$(df / | awk 'NR==2{print $5}' | cut -d'%' -f1)
if [ "$DISK_USAGE" -gt 80 ]; then
    echo "‚ö†Ô∏è  Attention: Espace disque faible ($DISK_USAGE%)"
    read -p "Continuer ? (y/N): " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# D√©marrer les services avec configuration production
echo "üöÄ D√©marrage des services de production..."
docker-compose up -d

# Attendre le d√©marrage
echo "‚è≥ Attente du d√©marrage des services..."
sleep 30

# V√©rifier la sant√© des services
echo "üè• V√©rification de la sant√© des services..."
for i in {1..30}; do
    if docker-compose ps | grep -q "healthy"; then
        echo "‚úÖ Services d√©marr√©s avec succ√®s"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "‚ùå Timeout: Les services ne d√©marrent pas correctement"
        echo "üìã Logs des services :"
        docker-compose logs --tail=20
        exit 1
    fi
    sleep 5
done

# Test de connectivit√©
echo "üîó Test de connectivit√©..."
if curl -f http://localhost:5000/health &>/dev/null; then
    echo "‚úÖ Application accessible sur http://localhost:5000"
else
    echo "‚ùå Application non accessible"
    docker-compose logs regisflow --tail=20
    exit 1
fi

# Afficher le statut final
echo ""
echo "üéâ D√âPLOIEMENT PRODUCTION R√âUSSI !"
echo "=================================="
echo "üì± Application RegisFlow : http://localhost:5000"
echo "üóÑÔ∏è  PostgreSQL : localhost:5433"
echo "üìä Statut des services :"
docker-compose ps

echo ""
echo "üìã Commandes utiles :"
echo "  - Logs : docker-compose logs -f"
echo "  - Statut : docker-compose ps"
echo "  - Arr√™t : docker-compose down"
echo "  - Sauvegarde : docker-compose exec regisflow-db pg_dump -U regisflow regisflow > backup.sql"
echo ""
echo "‚ö†Ô∏è  N'oubliez pas de configurer HTTPS avec un reverse proxy pour la production !"